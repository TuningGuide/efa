public class EfaFrame extends JFrame implements AutoCompletePopupWindowCallback {
  int oldFahrtDauerSelectedIndex=0; // letzte Position von fahrtDauer
  boolean ignoreFahrtDauerItemStateChanges = false; // zum Unterdrücken der StateChanges beim bearbeiten der Liste nach Hinzufügen einer Fahrt
  String fahrtArt_neueMehrtagesfahrt = null;
  String fahrtArt_mehrtagesfahrtBearbeiten = null;
  String fahrtArt_mehrtagesfahrtKonfigurieren = null;

  boolean continueMTour;        // legt fest, ob nächster neuer Eintrag mit unverändertem MTour-Feld (d.h. gleiches Element ausgewählt) begonnen werden soll
  String refDate="";            // Referenzdatum
  boolean askForOpenNewFb=false;// fragen, ob ein neues FB angelegt werden soll (nur beim ersten Start)
  int datumErrorCount=0;        // zum Zählen der Fehler, die beim Setzen des Datums aufgetreten sind

  String direkt_boot;           // Bootsname, mit dem EfaFrame aufgerufen wurde
  EfaDirektFrame efaDirektFrame;
  AdminFrame efaDirektAdminFrame;
  Admin admin = null;
  NachrichtenAnAdmin nachrichtenAnAdmin;
  int positionX,positionY;      // Position des Frames, wenn aus efaDirekt aufgerufen
  private boolean _inObmannUpdate = false;


  /**Construct the frame from Efa */
  public EfaFrame(String fb) {
    this.mode = MODE_FULL;
    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
    try {
      this.startOpenFb = fb;
      iniFrameData();
      jbInit();
      infoLabel.setVisible(false);
      bootsschadenButton.setVisible(false);
      packFrame("EfaFrame(...) from Efa");
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    Dialog.frameOpened(this);
  }


  /**Construct the frame from direkt.EfaDirektFrame */
  public EfaFrame(EfaDirektFrame efaDirektFrame, NachrichtenAnAdmin nachrichtenAnAdmin) {
    this.efaDirektFrame = efaDirektFrame;
    this.nachrichtenAnAdmin = nachrichtenAnAdmin;
    this.mode = MODE_START;
    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
    try {
      iniFrameData();
      jbInit();
      infoLabel.setVisible(Daten.efaConfig.efaDirekt_showEingabeInfos.getValue());
      bootsschadenButton.setVisible(Daten.efaConfig.efaDirekt_showBootsschadenButton.getValue());
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    this.setJMenuBar(null);
    contentPane.remove(toolBar);
    fahrtDauerAddItems(true); // add *all* items to fahrtDauer (including MEHRTAGESFAHRT)

    // bei entspr. Einstellung Obmann-Auswahlliste ausblenden
    if (!Daten.efaConfig.showObmann.getValue()) {
      this.obmannLabel.setVisible(false);
      this.obmann.setVisible(false);
    }

    this.setResizable(false);
    packFrame("EfaFrame(...) from EfaDirektFrame");
  }

  /**Construct the frame from direkt.AdminFrame */
  public EfaFrame(AdminFrame frame, EfaDirektFrame efaDirektFrame, String fb, Admin admin, int mode) {
    this.efaDirektAdminFrame = frame;
    this.efaDirektFrame = efaDirektFrame;
    this.admin = admin;
    this.mode = mode;
    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
    try {
      this.startOpenFb = fb;
      iniFrameData();
      jbInit();
      infoLabel.setVisible(false);
      bootsschadenButton.setVisible(false);
      packFrame("EfaFrame(...) from AdminFrame");
    }
    catch(Exception e) {
      e.printStackTrace();
    }
    if (mode == MODE_ADMIN_NUR_FAHRTEN) {
      this.setJMenuBar(null);
    }
    Dialog.frameOpened(this);
  }



// ==================== Menüs und Buttons ======================================


  // Menü Datei->efa Online Update
  void jMenuOnlineUpdate_actionPerformed(ActionEvent e) {
    if (isDirectMode() || mode == MODE_ADMIN_NUR_FAHRTEN) return;
    if (this.mode != MODE_FULL) {
      Dialog.error(International.getString("Diese Funktion steht nur im Basis-Modus von efa zur Verfügung.") + "\n" +
                   International.getString("Bitte starte efa im Basis-Modus, um ein Online-Update durchzuführen."));
      startBringToFront(false); // efaDirekt im BRC -- Workaround
      return;
    }
    if (!sicherheitsabfrage()) return;
    OnlineUpdateFrame.runOnlineUpdate(this,Daten.ONLINEUPDATE_INFO);
  }

  boolean isFahrtDauerMehrtagesfahrtAction(String fahrtart) {
      if (fahrtart == null) return false;
      if (fahrtart.equals(fahrtArt_mehrtagesfahrtBearbeiten) ||
          fahrtart.equals(fahrtArt_mehrtagesfahrtKonfigurieren) ||
          fahrtart.equals(fahrtArt_neueMehrtagesfahrt)) return true;
      return false;
  }


  // anderes Element der Liste fahrtDauer ausgewählt
  void fahrtDauer_itemStateChanged(ItemEvent e) {
    if (ignoreFahrtDauerItemStateChanges) return;
    if (oldFahrtDauerSelectedIndex<0) { oldFahrtDauerSelectedIndex = 9999; return; }
    if (Daten.fahrtenbuch == null) { oldFahrtDauerSelectedIndex = 9999; return; }
    if (fahrtart.getSelectedIndex() == oldFahrtDauerSelectedIndex) { oldFahrtDauerSelectedIndex = 9999; return; } // doppelte Aufrufe verhindern
    if (fahrtart.getSelectedItem() == null) { return; }

    if (!isFahrtDauerMehrtagesfahrtAction((String)fahrtart.getSelectedItem())) {
        datensatzGeaendert = true;
    }
    oldFahrtDauerSelectedIndex = fahrtart.getSelectedIndex();

    if (isDirectMode()) return;

    if (fahrtArt_neueMehrtagesfahrt != null &&
        ((String)fahrtart.getSelectedItem()).equals(fahrtArt_neueMehrtagesfahrt)) {
      String mtourEnddatum = null;
      String mtourRudertage = null;
      if (aktDatensatz != null &&
          aktDatensatz.get(Fahrtenbuch.FAHRTART).startsWith(Fahrtenbuch.CONFIGURE_MTOUR+"@@")) {
        String tmp = aktDatensatz.get(Fahrtenbuch.FAHRTART);
        int pos = tmp.indexOf("@@");
        if (pos>0) {
          tmp = tmp.substring(pos+2,tmp.length());
          pos = tmp.indexOf("@@");
          if (pos>=0) {
            mtourEnddatum = tmp.substring(0,pos);
            mtourRudertage = tmp.substring(pos+2,tmp.length());
          }
        }
      }
      MehrtagestourFrame dlg = new MehrtagestourFrame(this,datum.getText().trim(),mtourEnddatum,mtourRudertage);
      Dialog.setDlgLocation(dlg,this);
      dlg.setModal(!Dialog.tourRunning);
      dlg.show();
      startBringToFront(false); // efaDirekt im BRC -- Workaround
    }
    if (fahrtArt_mehrtagesfahrtBearbeiten != null &&
        ((String)fahrtart.getSelectedItem()).equals(fahrtArt_mehrtagesfahrtBearbeiten)) {
      if (isDirectMode()) return;
      if (Daten.fahrtenbuch == null) return;
      if (datensatzGeaendert && !sicherheitsabfrageDatensatz()) return;
      ignoreFahrtDauerItemStateChanges=true;
      fahrtart.setPopupVisible(false);
      oeffneAuswahl(AuswahlFrame.MEHRTAGESFAHRTEN);
      if (aktDatensatz != null) try {
        String fa = aktDatensatz.get(Fahrtenbuch.FAHRTART);
        getAllFahrtDauer();
        if (fa.length()>0 && fa.startsWith(EfaTypes.TYPE_SESSION_MULTIDAY+":")) {
            fa = fa.substring(EfaTypes.TYPE_SESSION_MULTIDAY.length()+1);
            fahrtart.setSelectedItem(fa);
            fahrtart.setSelectedItem(fa);
        } else {
            setFahrtDauerDefault();
        }
      } catch(Exception ee) {}
      ignoreFahrtDauerItemStateChanges=false;
    }
  }


// ================================== Öffnen, Speichern, Beenden etc. ===========================

  // Programm initialisieren
  void appIni() {
    // Prüfen, ob efa gestartet werden darf
    if (!Daten.efaSec.secFileExists() && admin == null) {
      admin = null;
      do {
        admin = AdminLoginFrame.login(null,International.getString("Zugang nur für Administratoren"));
        if (admin == null) {
            Daten.haltProgram(Daten.HALT_ADMIN);
        }
        if (!admin.allowedFahrtenbuchBearbeiten && !admin.allowedVollzugriff) {
            Dialog.error(International.getMessage("Du hast als Admin {name} keine Berechtigung, das Fahrtenbuch zu bearbeiten!", admin.name));
        }
      } while (!admin.allowedFahrtenbuchBearbeiten && !admin.allowedVollzugriff);
    }


  }



  // Mehrtagestour zum FB und zur Auswahlliste hinzufügen (und als akt. Element auswählen)
  void addMehrtagestour(String name, String start, String ende, int rudertage, String gewaesser, boolean isEtappen) {
    if (Daten.fahrtenbuch == null || Daten.fahrtenbuch.getMehrtagesfahrt(name) != null) return;
    Daten.fahrtenbuch.addMehrtagesfahrt(name,start,ende,rudertage,gewaesser,isEtappen);

    ignoreFahrtDauerItemStateChanges=true;
    oldFahrtDauerSelectedIndex=-1;
    setFahrtDauerDefault();
    if (fahrtArt_mehrtagesfahrtBearbeiten != null) {
        oldFahrtDauerSelectedIndex=-1;
        fahrtart.removeItem(fahrtArt_mehrtagesfahrtBearbeiten); // letztes Element ("Mehrtagesfahrten bearbeiten") entfernen
    }
    if (fahrtArt_neueMehrtagesfahrt != null) {
        oldFahrtDauerSelectedIndex=-1;
        fahrtart.removeItem(fahrtArt_neueMehrtagesfahrt); // letztes Element ("neue Mehrtagesfahrt") entfernen
    }
    oldFahrtDauerSelectedIndex=-1;
    fahrtart.addItem(name);
    if (fahrtArt_neueMehrtagesfahrt != null) {
        oldFahrtDauerSelectedIndex=-1;
        fahrtart.addItem(fahrtArt_neueMehrtagesfahrt);
    }
    if (fahrtArt_mehrtagesfahrtBearbeiten != null) {
         oldFahrtDauerSelectedIndex=-1;
         fahrtart.addItem(fahrtArt_mehrtagesfahrtBearbeiten);
    }
    oldFahrtDauerSelectedIndex=-1;
    fahrtart.setSelectedItem(name);
    ignoreFahrtDauerItemStateChanges=false;
    datensatzGeaendert = true;
  }


  void fahrtDauerAddItems(boolean withMehrtagesfahrt) {
      if (Daten.efaTypes != null) {
          for (int i=0; i<Daten.efaTypes.size(EfaTypes.CATEGORY_SESSION); i++) {
              if (!withMehrtagesfahrt &&
                  Daten.efaTypes.getType(EfaTypes.CATEGORY_SESSION, i).equals(EfaTypes.TYPE_SESSION_MULTIDAY)) {
                  // nothing to do
              } else {
                  fahrtart.addItem(Daten.efaTypes.getValue(EfaTypes.CATEGORY_SESSION, i));
              }
          }
      }
  }


  // Alle Angaben zu Mehrtagesfahrten zusammentragen
  // (nur nach FB öffnen aufrufen, da akt. Eintrag nicht gemerkt wird)
  void getAllFahrtDauer() {
    fahrtart.removeAllItems();
    fahrtDauerAddItems(false);
    if (fahrtArt_mehrtagesfahrtKonfigurieren != null && (mode == MODE_ADMIN || mode == MODE_ADMIN_NUR_FAHRTEN)) {
        fahrtart.addItem(fahrtArt_mehrtagesfahrtKonfigurieren);
    }
    if (Daten.fahrtenbuch != null) {
      String[] mtours = Daten.fahrtenbuch.getAllMehrtagesfahrtNamen();
      for (int i=0; mtours != null && i<mtours.length; i++)
        fahrtart.addItem(Daten.fahrtenbuch.getMehrtagesfahrt(mtours[i]).getDisplayName());
    }
    if (fahrtArt_neueMehrtagesfahrt != null) {
        fahrtart.addItem(fahrtArt_neueMehrtagesfahrt);
    }
    if (fahrtArt_mehrtagesfahrtBearbeiten != null) {
        fahrtart.addItem(fahrtArt_mehrtagesfahrtBearbeiten);
    }
    if (fahrtart.getItemCount()>0) {
        setFahrtDauerDefault();
    }
  }




  private String createFahrtartKey(String fahrtart) {
    if (Daten.efaTypes != null && fahrtart != null &&
        !this.isFahrtDauerMehrtagesfahrtAction(fahrtart)) {
        String key = Daten.efaTypes.getTypeForValue(EfaTypes.CATEGORY_SESSION, fahrtart);
        if (key != null) {
           return key;
        } else {
           return EfaTypes.TYPE_SESSION_MULTIDAY + ":" + Mehrtagesfahrt.getNameFromDisplayName(fahrtart);
        }
    }
    return "";
  }

// ================================= METHODEN FUER DEN AUFRUF AUS EFADIREKTFRAME ==============================

  public void setFixedLocation(int x, int y) {
    if (x>=0 && y>=0) {
      this.positionX = x;
      this.positionY = y;
    }
    this.setLocation(this.positionX,this.positionY);
  }

  private void showEfaFrame(Component focusComponent) {
    if (infoLabel.isVisible() != Daten.efaConfig.efaDirekt_showEingabeInfos.getValue()) {
      infoLabel.setVisible(Daten.efaConfig.efaDirekt_showEingabeInfos.getValue());
    }
    packFrame("showEfaFrame()");
    setFixedLocation(-1,-1);
    this.show();
    this.setVisible(true);
    this.toFront();
    Dialog.frameOpened(this);
    if (focusComponent != null) focusComponent.requestFocus();

    startBringToFront(true);
  }

  public void startBringToFront(boolean always) {
    // Irgendwie ist im BRC das EfaFrame immer dann, wenn zuvor eine Dialog-Box aufpoppte, noch immer nicht
    // im Vordergrund; daher dieser Workaround
    if (!always) {
      // nur im Admin-Mode nach vorne bringen
      if (!isAdminMode()) return;
      if (this.isActive()) {
          if (Logger.isTraceOn(Logger.TT_GUI)) {
              Logger.log(Logger.DEBUG,Logger.MSG_DEBUG_GENERIC,
                         "Dialog closed: EfaFrame is already active.");
          }
        return;
      }
      if (Logger.isTraceOn(Logger.TT_GUI)) {
          Logger.log(Logger.DEBUG,Logger.MSG_DEBUG_GENERIC,
                     "Dialog closed: EfaFrame is inactive and will be brought to front.");
      }
    }
    (new EfaFrameBringToFrontThread(this,100)).start();
  }

  private void hideEfaFrame() {
    this.hide();
    Dialog.frameClosed(this);
  }

  public void direktFahrtAnfang(String boot, String person) {
    this.direkt_boot = boot;
    Component focusComponent = null;
    this.mode = MODE_START;
    this.setTitle(International.getString("Neue Fahrt beginnen"));
    SetBlankFields();
    if (this.lfdnr.getText().trim().length()==0) this.lfdnr.setText("1");

    this.refDate=""; datumSetText(""); // damit aktuelles Datum im Datums-Feld erscheint...
    setDateFromRefDate();
    if (boot != null) this.boot.setText(boot);
    vervollstaendige(this.boot,bootButton,Daten.fahrtenbuch.getDaten().boote,null,this,false);
    setTime(abfahrt,Daten.efaConfig.efaDirekt_plusMinutenAbfahrt.getValue(), null);
    Mnemonics.setButton(this, addButton, International.getStringWithMnemonic("Fahrt beginnen"));

    setFieldEnabled(false, true, lfdnr, lfdnrLabel, null);
    setFieldEnabled(true, true, datum, datumLabel, null);
    setFieldEnabled(boot == null, true, this.boot, bootLabel, bootButton);
    setFieldEnabled(true, true, stm, stmLabel, stmButton);
    if (Daten.efaConfig.efaDirekt_eintragNichtAenderbarUhrzeit.getValue()) {
      setFieldEnabled(false, true, abfahrt, abfahrtLabel, null);
      setFieldEnabled(false, false, ankunft, ankunftLabel, null);
    } else {
      setFieldEnabled(true, true, abfahrt,abfahrtLabel, null);
      setFieldEnabled(false, false, ankunft, ankunftLabel, null);
    }
    setFieldEnabled(true, true, ziel, zielLabel, zielButton);
    setFieldEnabled(false, false, bootskm, bootskmLabel, null);
    setFieldEnabled(true, true, bemerk, bemerkLabel, null);
    if (boot != null) {
      DatenFelder d = Daten.fahrtenbuch.getDaten().boote.getExactComplete(boot);
      setFieldEnabledStmUndMannsch(d);
      if (Daten.mannschaften != null && Daten.efaConfig.autoStandardmannsch.getValue() &&
          boot.length()!=0 &&
          Daten.mannschaften.getExact(boot)!= null) {
        setStandardMannschaft((DatenFelder)Daten.mannschaften.getComplete());
      }
      if (stm.isEnabled()) focusComponent = stm;
      else focusComponent = mannsch[0];
    } else {
      setFieldEnabledStmUndMannsch(null);
      focusComponent = this.boot;
    }
    if (person != null) {
        mannsch[0].setText(person);
        vervollstaendige(mannsch[0],mannschButton[0],Daten.fahrtenbuch.getDaten().mitglieder,null,this,false);
        mannsch1_focusLost(null);
    }
    boot_focusLostGetBoot();
    bootskm.setText(""); // falls durch "Standardmannschaft" bereits ein Fahrtziel (und somit auch die Km) eingetragen wurden
    setFieldEnabled(false, false, null, null, bootsschadenButton);
    showEfaFrame(focusComponent);
  }

  public void direktFahrtAnfangKorrektur(String boot, String lfdnr) {
    this.mode = MODE_START_KORREKTUR;
    this.direkt_boot = boot;
    this.setTitle(International.getString("Eintrag korrigieren"));
    DatenFelder d = (DatenFelder)Daten.fahrtenbuch.getExactComplete(lfdnr);
    if (d == null) {
      Logger.log(Logger.ERROR, Logger.MSG_ERR_NOLOGENTRYFORBOAT,
              International.getString("Fahrtbeginn") +
              " (" + International.getString("Korrektur") + "): " +
              International.getMessage("Die gewählte Fahrt #{lfdnr} ({boot}) konnte nicht gefunden werden!", lfdnr, boot));
      Dialog.error(International.getMessage("Die gewählte Fahrt #{lfdnr} ({boot}) konnte nicht gefunden werden!", lfdnr, boot));
      Dialog.frameOpened(this); // Bugfix: Damit es nicht zur Stack-Inkonsistenz kommt!
      cancel();
      return;
    }
    SetFields(d);
    Mnemonics.setButton(this, addButton, International.getStringWithMnemonic("Fahrt beginnen") +
            " (" + International.getString("Korrektur") +")");

    setFieldEnabled(false, true, this.lfdnr, lfdnrLabel, null);
    setFieldEnabled(true, true, datum, datumLabel, null);
    setFieldEnabled(true, true, this.boot, bootLabel, bootButton);
    if (Daten.efaConfig.efaDirekt_eintragNichtAenderbarUhrzeit.getValue()) {
      setFieldEnabled(false, true, abfahrt, abfahrtLabel, null);
      setFieldEnabled(false, false, ankunft, ankunftLabel, null);
    } else {
      setFieldEnabled(true, true, abfahrt, abfahrtLabel, null);
      setFieldEnabled(false, false, ankunft, ankunftLabel, null);
    }
    setFieldEnabled(true, true, ziel, zielLabel, zielButton);
    setFieldEnabled(false, false, bootskm, bootskmLabel, null);
    setFieldEnabled(true, true, bemerk, bemerkLabel, null);

    if (boot != null) {
      DatenFelder db = Daten.fahrtenbuch.getDaten().boote.getExactComplete(boot);
      setFieldEnabledStmUndMannsch(db);
    } else setFieldEnabledStmUndMannsch(null);

    bootskm.setText(""); // falls durch "Standardmannschaft" bereits ein Fahrtziel (und somit auch die Km) eingetragen wurden
    setFieldEnabled(false, false, null, null, bootsschadenButton);
    showEfaFrame(datum);
  }

  public void direktFahrtEnde(String boot, String lfdnr) {
    this.mode = MODE_ENDE;
    this.direkt_boot = boot;
    this.setTitle(International.getString("Fahrt abschließen"));
    DatenFelder d = (DatenFelder)Daten.fahrtenbuch.getExactComplete(lfdnr);
    if (d == null) {
      Logger.log(Logger.ERROR, Logger.MSG_ERR_NOLOGENTRYFORBOAT,
              International.getString("Fahrtende") + ": " +
              International.getMessage("Die gewählte Fahrt #{lfdnr} ({boot}) konnte nicht gefunden werden!", lfdnr, boot));
      Dialog.error(International.getMessage("Die gewählte Fahrt #{lfdnr} ({boot}) konnte nicht gefunden werden!", lfdnr, boot));
      efaDirektFrame.fahrtBeendet(boot,true);
      Dialog.frameOpened(this); // Bugfix: Damit es nicht zur Stack-Inkonsistenz kommt!
      cancel();
      return;
    }
    SetFields(d);
    setTime(ankunft,-Daten.efaConfig.efaDirekt_minusMinutenAnkunft.getValue(), abfahrt.getText().trim());
    if (d.get(Fahrtenbuch.BOOTSKM).equals("0")) bootskm.setText("");
    if (d.get(Fahrtenbuch.ZIEL).length()>0 && bootskm.getText().length() == 0) {
      DatenFelder ziel = Daten.fahrtenbuch.getDaten().ziele.getExactComplete(d.get(Fahrtenbuch.ZIEL));
      if (ziel != null) {
        bootskm.setText(ziel.get(Ziele.KM));
      }
    }

    Mnemonics.setButton(this, addButton, International.getStringWithMnemonic("Fahrt abschließen"));

    setFieldEnabled(false, true, this.lfdnr, lfdnrLabel, null);
    setFieldEnabled(false, true, datum, datumLabel, null);
    setFieldEnabled(false, true, this.boot, bootLabel, bootButton);
    if (Daten.efaConfig.efaDirekt_eintragNichtAenderbarUhrzeit.getValue()) {
      setFieldEnabled(false, true, abfahrt, abfahrtLabel, null);
      setFieldEnabled(false, true, ankunft, ankunftLabel, null);
    } else {
      setFieldEnabled(true, true, abfahrt, abfahrtLabel, null);
      setFieldEnabled(true, true, ankunft, ankunftLabel, null);
    }
    setFieldEnabled(true, true, ziel, zielLabel, zielButton);
    setFieldEnabledBootsKm();
    setFieldEnabled(true, true, bemerk, bemerkLabel, null);

    if (boot != null) {
      DatenFelder db = Daten.fahrtenbuch.getDaten().boote.getExactComplete(boot);
      setFieldEnabledStmUndMannsch(db);
    } else setFieldEnabledStmUndMannsch(null);

    setFieldEnabled(true, Daten.efaConfig.efaDirekt_showBootsschadenButton.getValue(), null, null, bootsschadenButton);

    showEfaFrame(ziel);
  }

  public void direktFahrtNachtrag(String bootPreselected) {
    this.mode = MODE_NACHTRAG;
    this.direkt_boot = bootPreselected;
    this.setTitle(International.getString("Nachtrag"));
    SetBlankFields();
    if (this.lfdnr.getText().trim().length()==0) this.lfdnr.setText("1");

    this.refDate=""; datumSetText(""); // damit aktuelles Datum im Datums-Feld erscheint...
    setDateFromRefDate();
    Mnemonics.setButton(this, addButton, International.getStringWithMnemonic("Nachtrag speichern"));

    setFieldEnabled(false, true, lfdnr, lfdnrLabel, null);
    setFieldEnabled(true, true, datum, datumLabel, null);
    setFieldEnabled(true, true, boot, bootLabel, bootButton);
    setFieldEnabledStmUndMannsch(null);
    setFieldEnabled(true, true, abfahrt, abfahrtLabel, null);
    setFieldEnabled(true, true, ankunft, ankunftLabel, null);
    setFieldEnabled(true, true, ziel, zielLabel, zielButton);
    setFieldEnabled(true, true, bootskm, bootskmLabel, null);
    setFieldEnabled(true, true, bemerk, bemerkLabel, null);
    if (bootPreselected != null) {
      boot.setText(bootPreselected);
      vervollstaendige(boot,bootButton,Daten.fahrtenbuch.getDaten().boote,null,this,false);
      DatenFelder db = Daten.fahrtenbuch.getDaten().boote.getExactComplete(bootPreselected);
      setFieldEnabledStmUndMannsch(db);
    } else {
        setFieldEnabledStmUndMannsch(null);
    }
    setFieldEnabled(true, Daten.efaConfig.efaDirekt_showBootsschadenButton.getValue(), null, null, bootsschadenButton);
    showEfaFrame(datum);
  }

  public String stmMannsch2String() {
    String s;
    String pers = ( (s = stm.getText().trim())       == null || s.length()==0 ? "" : s+"; " );
    for (int i=0; i<Fahrtenbuch.ANZ_MANNSCH; i++) if ( (s = mannsch[i].getText().trim()).length()>0 ) pers += s+"; ";
    if (pers.length()>2) pers = pers.substring(0,pers.length()-2);
    return pers;
  }

  private boolean unbekannterName(JTextField field, DatenListe daten) {
    return (field.getText().trim().length()>0 && daten != null &&
        daten.getExactComplete(field.getText().trim()) == null);
  }

  void direktSpeichereDatensatz() {
    String direktBootOriginalName = ""; // Name des Bootes, welches bei efaDirekt ursprünglich übergeben wurde (um Änderungen des Bootsnamens bei Korrektur der Fahrt festzustellen)
    String mtourName = null; // Bei Mehrtagesfahrten der Name der Mehrtagesfahrt
    if (aktDatensatz != null) direktBootOriginalName = aktDatensatz.get(Fahrtenbuch.BOOT);

    if (boot.getText().trim().length()==0) {
      if (mode == MODE_NACHTRAG) {
        if (Dialog.yesNoDialog(International.getString("Kein Bootsname angegeben"),
                               International.getString("Du hast keinen Bootsnamen angegeben.\nMöchtest Du das Feld wirklich leer lassen?")) != Dialog.YES) {
          boot.requestFocus();
          startBringToFront(false); // efaDirekt im BRC -- Workaround
          return;
        }
      } else {
        Dialog.error(International.getString("Bitte gib einen Bootsnamen ein!"));
        boot.requestFocus();
        return;
      }
    }
    abfahrt_focusLost(null); ankunft_focusLost(null);

    String pers = stmMannsch2String();
    if (pers.length()==0) {
      Dialog.error(International.getString("Bitte trage mindestens eine Person ein!"));
      stm.requestFocus();
      return;
    }

    // falls noch nicht geschehen, ggf. automatisch Obmann auswählen
    if (Daten.efaConfig.autoObmann.getValue() && getObmann() < 0) {
      autoSetObmann();
    }

    // Obmann-Auswahl (Autokorrektur, neu in 1.7.1)
    if (getObmann() == 0 && stm.getText().trim().length() == 0 && mannsch[0].getText().trim().length() > 0) setObmann(1,true);
    if (getObmann() > 0 && mannsch[getObmann()-1].getText().trim().length() == 0 && stm.getText().trim().length() > 0) setObmann(0,true);
    if (getObmann() > 0 && mannsch[getObmann()-1].getText().trim().length() == 0 && mannsch[0].getText().trim().length() > 0) setObmann(1,true);
    // Obmann-Check
    if ( (getObmann() == 0 && stm.getText().trim().length()==0) ||
         (getObmann()  > 0 && mannsch[getObmann()-1].getText().trim().length()==0) ) {
      Dialog.error(International.getString("Bitte wähle als Obmann eine Person aus, die tatsächlich im Boot sitzt!"));
      obmann.requestFocus();
      return;
    }

    if (Daten.efaConfig.efaDirekt_eintragErzwingeObmann.getValue() && getObmann() < 0) {
      Dialog.error(International.getString("Bitte wähle einen Obmann aus!"));
      obmann.requestFocus();
      return;
    }

    // Prüfen, ob ggf. nur bekannte Boote/Ruderer/Ziele eingetragen wurden
    if (Daten.efaConfig.efaDirekt_eintragNurBekannteBoote.getValue() && unbekannterName(boot,Daten.fahrtenbuch.getDaten().boote)) {
      Dialog.error(International.getMessage("Das Boot '{bootsname}' ist unbekannt. Bitte trage ein bekanntes Boot ein!", boot.getText().trim()));
      boot.requestFocus();
      return;
    }
    if (Daten.efaConfig.efaDirekt_eintragNurBekannteRuderer.getValue() && unbekannterName(stm,Daten.fahrtenbuch.getDaten().mitglieder)) {
      Dialog.error(International.getMessage("Person '{name}' ist unbekannt. Bitte trage eine bekannte Person ein!", stm.getText().trim()));
      stm.requestFocus();
      return;
    }
    for (int i=0; i<mannsch.length; i++) {
      if (Daten.efaConfig.efaDirekt_eintragNurBekannteRuderer.getValue() && unbekannterName(mannsch[i],Daten.fahrtenbuch.getDaten().mitglieder)) {
        Dialog.error(International.getMessage("Person '{name}' ist unbekannt. Bitte trage eine bekannte Person ein!", mannsch[i].getText().trim()));
        mannsch[i].requestFocus();
        return;
      }
    }
    if (Daten.efaConfig.efaDirekt_eintragNurBekannteZiele.getValue() && unbekannterName(ziel,Daten.fahrtenbuch.getDaten().ziele)) {
      Dialog.error(International.getMessage("Das Ziel '{ziel}' ist unbekannt. Bitte trage ein bekanntes Ziel ein!", ziel.getText().trim()));
      ziel.requestFocus();
      return;
    }

    // ***Ersetzt durch Konfigurieren der Mehrtagesfahrt direkt durch das Mitglied***
    // ***Folgende beide Variablen werden nicht mehr genutzt und bleiben auf "null" initialisiert***
    String enddatum=null,rudertage=null;

    if (mode == MODE_START || mode == MODE_START_KORREKTUR) {
      if (ziel.getText().trim().length()==0 && Daten.efaConfig.efaDirekt_zielBeiFahrtbeginnPflicht.getValue()) {
        Dialog.error(International.getString("Bitte trage ein voraussichtliches Fahrtziel ein!"));
        ziel.requestFocus();
        return;
      }

      // Auf nicht erlaubte Ruderer prüfen
      DatenFelder b = null;
      if (Daten.fahrtenbuch != null && Daten.fahrtenbuch.getDaten().boote != null) b = Daten.fahrtenbuch.getDaten().boote.getExactComplete(boot.getText().trim());
      if (b != null && b.get(Boote.GRUPPEN).length() > 0 && Daten.gruppen != null) {
        String nichtErlaubt = null;
        int nichtErlaubtAnz = 0;
        Vector g = Boote.getGruppen(b);
        for (int i=0; i<Fahrtenbuch.ANZ_MANNSCH; i++) {
          String m = mannsch[i].getText().trim();
          if (m.length() > 0) {
            boolean inAnyGroup = false;
            for (int j=0; j<g.size(); j++) {
              if (Daten.gruppen.isInGroup((String)g.get(j),EfaUtil.getVorname(m),EfaUtil.getNachname(m),EfaUtil.getVerein(m))) inAnyGroup = true;
            }
            if (!inAnyGroup) {
              nichtErlaubt = (nichtErlaubt == null ? m : nichtErlaubt + "\n" + m);
              nichtErlaubtAnz++;
            }
          }
        }
        if (nichtErlaubtAnz > EfaUtil.string2int(b.get(Boote.MAX_NICHT_IN_GRUPPE),0)) {
          String erlaubteGruppen = null;
          for (int j=0; j<g.size(); j++) {
            erlaubteGruppen = (erlaubteGruppen == null ? (String)g.get(j) : erlaubteGruppen + (j+1<g.size() ? ", "+g.get(j) : " " +
                    International.getString("und") + " " + g.get(j)) ); // @todo: for some languages it might be necessary to translate ", " as well, or even use a ChoiceFormat here
          }
          switch (Dialog.auswahlDialog(International.getString("Boot nur für bestimmte Gruppen freigegeben"),
                                 International.getMessage("Dieses Boot dürfen nur {list_of_valid_groups} nutzen.",erlaubteGruppen) + "\n" +
                                 International.getMessage("{nichtErlaubtAnz,choice,1#Folgende Person gehört diesen Gruppen nicht an und darf das Boot daher nicht nutzen:|2#Folgende Personen gehören diesen Gruppen nicht an und dürfen das Boot daher nicht nutzen:}",
                                 nichtErlaubtAnz) + " \n" + nichtErlaubt + "\n" +
                                 International.getString("Was möchtest Du tun?"),
                                 International.getString("Anderes Boot wählen"),
                                 International.getString("Mannschaft ändern"),
                                 International.getString("Trotzdem benutzen"),
                                 International.getString("Eintrag abbrechen"))) {
            case 0:
              this.setFieldEnabled(true, true, this.boot, this.bootLabel, bootButton);
              this.boot.setText("");
              this.boot.requestFocus();
              return;
            case 1:
              this.mannsch[0].requestFocus();
              return;
            case 2:
              Logger.log(Logger.INFO, Logger.MSG_EVT_UNALLOWEDBOATUSAGE,
                      International.getString("Unerlaubte Benutzung eines Bootes") + ": " +
                      International.getString("LfdNr") + "=" + lfdnr.getText().trim() + " " +
                      International.getString("Boot") + "=" + boot.getText().trim() + " " +
                      International.getString("Mannschaft") + "=" + pers);
              break;
            case 3:
              cancel();
              return;
          }
        }
      }

      // Prüfen, ob mind 1 Ruderer (oder Stm) der Gruppe "mind 1 aus Gruppe" im Boot sitzt
      if (b != null && b.get(Boote.MIND_1_IN_GRUPPE).length() > 0 && Daten.gruppen != null) {
        String gruppe = b.get(Boote.MIND_1_IN_GRUPPE);
        int gefunden = 0;

        String m = stm.getText().trim();
        if (m.length()>0 && Daten.gruppen.isInGroup(gruppe,EfaUtil.getVorname(m),EfaUtil.getNachname(m),EfaUtil.getVerein(m))) gefunden++;
        for (int i=0; i<Fahrtenbuch.ANZ_MANNSCH; i++) {
          m = mannsch[i].getText().trim();
          if (m.length()>0 && Daten.gruppen.isInGroup(gruppe,EfaUtil.getVorname(m),EfaUtil.getNachname(m),EfaUtil.getVerein(m))) gefunden++;
        }

        if (gefunden == 0) {
          switch (Dialog.auswahlDialog(International.getString("Boot erfordert bestimmte Berechtigung"),
                                 International.getMessage("In diesem Boot muß mindestens ein Mitglied der Gruppe {groupname} sitzen.",gruppe) + "\n" +
                                 International.getString("Was möchtest Du tun?"),
                                 International.getString("Anderes Boot wählen"),
                                 International.getString("Mannschaft ändern"),
                                 International.getString("Trotzdem benutzen"),
                                 International.getString("Eintrag abbrechen"))){
            case 0:
              this.setFieldEnabled(true, true, this.boot, this.bootLabel, bootButton);
              this.boot.setText("");
              this.boot.requestFocus();
              return;
            case 1:
              this.mannsch[0].requestFocus();
              return;
            case 2:
              Logger.log(Logger.INFO, Logger.MSG_EVT_UNALLOWEDBOATUSAGE,
                      International.getString("Unerlaubte Benutzung eines Bootes") + ": " +
                                "#" + lfdnr.getText().trim() + " - " + boot.getText().trim() + " " +
                                International.getMessage("mit {crew}",pers));
              break;
            case 3:
              cancel();
              return;
          }
        }
      }


      if (mode == MODE_START) {
          Logger.log(Logger.INFO, Logger.MSG_EVT_TRIPSTART,
                  International.getString("Fahrtbeginn") + ": " +
                                "#" + lfdnr.getText().trim() + " - " + boot.getText().trim() + " " +
                                International.getMessage("mit {crew}",pers));
      } else {
          Logger.log(Logger.INFO, Logger.MSG_EVT_TRIPSTART_CORR,
                  International.getString("Fahrtbeginn korrigiert") + ": " +
                                "#" + lfdnr.getText().trim() + " - " + boot.getText().trim() + " " +
                                International.getMessage("mit {crew}",pers));
      }
      this.bootskm.setText(""); this.ankunft.setText(""); // wenn alle diese Werte "" sind, gilt der Eintrag als noch nicht zurückgetragen
      speichereDatensatzInFB(true,null,null,null);
      if (!Daten.fahrtenbuch.writeFileOnlyLastRecordChanged()) {
          LogString.logError_fileWritingFailed(Daten.fahrtenbuch.getFileName(), International.getString("Fahrtenbuch"));
      }
      if (mode == MODE_START) {
        efaDirektFrame.fahrtBegonnen(
                boot.getText().trim(),
                lfdnr.getText().trim(),
                datum.getText().trim(),
                abfahrt.getText().trim(),
                pers,
                createFahrtartKey((String)fahrtart.getSelectedItem()),
                ziel.getText().trim());
      } else {
        // Fahrtbeginn korrigiert
        if (direktBootOriginalName.equals(boot.getText().trim())) {
          // Bootsname nicht geändert
          efaDirektFrame.fahrtBeginnKorrigiert(
                  direkt_boot,
                  lfdnr.getText().trim(),
                  datum.getText().trim(),
                  abfahrt.getText().trim(),
                  pers,
                  createFahrtartKey((String)fahrtart.getSelectedItem()),
                  ziel.getText().trim(),
                  direkt_boot);
        } else {
          // Bootsname wurde geändert
          efaDirektFrame.fahrtBeginnKorrigiert(
                  boot.getText().trim(),
                  lfdnr.getText().trim(),
                  datum.getText().trim(),
                  abfahrt.getText().trim(),
                  pers,
                  createFahrtartKey((String)fahrtart.getSelectedItem()),
                  ziel.getText().trim(),
                  direkt_boot);
        }
      }
    } else { // MODE_ENDE oder MODE_NACHTRAG
      if (ziel.getText().trim().length()==0 && !Daten.efaConfig.skipZiel.getValue()) {
        Dialog.error(International.getString("Bitte trage ein Fahrtziel ein!"));
        ziel.requestFocus();
        return;
      }
      String km = bootskm.getText().trim();
      if (km.length()==0 || EfaUtil.zehntelString2Int(km)==0) {
        Dialog.error(International.getString("Bitte trage die gefahrenen Kilometer ein!"));
        bootskm.requestFocus();
        return;
      }

      // Mehrtagesfahrt?
      if (Daten.efaTypes != null && Daten.efaTypes.isConfigured(EfaTypes.CATEGORY_SESSION, EfaTypes.TYPE_SESSION_MULTIDAY) &&
              EfaTypes.TYPE_SESSION_MULTIDAY.equals(Daten.efaTypes.getTypeForValue(EfaTypes.CATEGORY_SESSION, fahrtart.getSelectedItem().toString()))) {
        mtourName = WanderfahrtSelectFrame.selectWanderfahrt(this,lfdnr.getText().trim(),datum.getText().trim(),boot.getText().trim(),stmMannsch2String(),ziel.getText().trim());
        if (mtourName == null) return;
        Mehrtagesfahrt mf = Daten.fahrtenbuch.getMehrtagesfahrt(mtourName);
        if (mf != null && mf.start != null && mf.start.length()>0) this.datum.setText(mf.start);
      }


      if (mode == MODE_ENDE) {
        Logger.log(Logger.INFO, Logger.MSG_EVT_TRIPEND,
                International.getString("Fahrtende") + ": " +
                                "#" + lfdnr.getText().trim() + " - " + boot.getText().trim() + " " +
                                International.getMessage("mit {crew}",pers) + "; " +
                                International.getString("Abfahrt") + ": " + abfahrt.getText().trim() + ", " +
                                International.getString("Ankunft") + ": " + ankunft.getText().trim() + "; " +
                                International.getString("Ziel") + ": " + ziel.getText().trim() + "; " +
                                International.getString("Km") + ": " + bootskm.getText().trim());
        Daten.fahrtenbuch.delete(this.lfdnr.getText().trim());
        speichereDatensatzInFB(false,enddatum,rudertage,mtourName);
        if (!Daten.fahrtenbuch.writeFile()) {
          LogString.logError_fileWritingFailed(Daten.fahrtenbuch.getFileName(), International.getString("Fahrtenbuch"));
        }
        efaDirektFrame.fahrtBeendet(direkt_boot,true);
      } else if (mode == MODE_NACHTRAG) {
        Logger.log(Logger.INFO, Logger.MSG_EVT_TRIPLATEREC,
                International.getString("Nachtrag") + ": " +
                                "#" + lfdnr.getText().trim() + " - " + boot.getText().trim() + " " +
                                International.getMessage("mit {crew}",pers) + "; " +
                                International.getString("Abfahrt") + ": " + abfahrt.getText().trim() + ", " +
                                International.getString("Ankunft") + ": " + ankunft.getText().trim() + "; " +
                                International.getString("Ziel") + ": " + ziel.getText().trim() + "; " +
                                International.getString("Km") + ": " + bootskm.getText().trim());
        speichereDatensatzInFB(true,enddatum,rudertage,mtourName);
        // wir müssen hier writeFile() verwenden anstatt writeFileOnlyLastRecordChanged(),
        // da bei einem Nachtrag (ebenso wie beim Beenden von Fahrten) u.U. auch die Liste der Mehrtagesfahrten
        // am Anfang der Datei mit verändert wird.
        if (!Daten.fahrtenbuch.writeFile()) {
          LogString.logError_fileWritingFailed(Daten.fahrtenbuch.getFileName(), International.getString("Fahrtenbuch"));
        }
        efaDirektFrame.fahrtNachgetragen();
      } else {
        Logger.log(Logger.ERROR, Logger.MSG_ERR_UNEXPECTED,
                International.getString("Programmfehler") +
                ": Unexpected Mode ["+mode+"] for direktSpeichereDatensatz()!");
      }
    }

    cancel();
  }


}
