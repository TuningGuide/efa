public class EfaDirektFrame extends JFrame implements ActionListener {

  private boolean isMultiDayFahrtart(String fahrttype) {
      if (fahrttype.equals(EfaTypes.TYPE_SESSION_REGATTA)) return true;
      if (fahrttype.equals(EfaTypes.TYPE_SESSION_JUMREGATTA)) return true;
      if (fahrttype.equals(EfaTypes.TYPE_SESSION_TRAININGCAMP)) return true;
      if (fahrttype.startsWith(EfaTypes.TYPE_SESSION_MULTIDAY)) return true;
      return false;
  }

  void setKombiBootStatus(String boot, String lfdnr, int status, String bemerk) {
    if (bootStatus == null) return;

    String org = EfaUtil.syn2org(Daten.synBoote,boot);
    if (org == null || org.equals(boot)) return; // kein Kombiboot

    Vector syn = EfaUtil.org2syn(Daten.synBoote,org);
    if (syn == null) return; // kein Kombiboot

    for (int i=0; i<syn.size(); i++) {
      String s = (String)syn.get(i);
      if (!boot.equals(s)) {
        DatenFelder d = bootStatus.getExactComplete(s);
        if (d != null && !d.get(BootStatus.STATUS).equals(BootStatus.getStatusKey(BootStatus.STAT_HIDE))) {
          d.set(BootStatus.LFDNR,lfdnr);
          d.set(BootStatus.STATUS,BootStatus.getStatusKey(status));
          d.set(BootStatus.BEMERKUNG,bemerk);
          bootStatus.delete(s);
          bootStatus.add(d);
        }
      }
    }
  }

  public void setBootstatusSchaden(String boot, String s) {
    if (boot == null || s == null || boot.length() == 0 || s.length() == 0) return;

    String org = EfaUtil.syn2org(Daten.synBoote,boot);
    if (org == null) org = boot;
    Vector syn = EfaUtil.org2syn(Daten.synBoote,org);
    if (syn == null) syn = new Vector();
    if (syn.size() == 0) syn.add(org);

    for (int i=0; i<syn.size(); i++) {
      String b = (String)syn.get(i);
      DatenFelder d = bootStatus.getExactComplete(b);
      if (d != null) {
        d.set(BootStatus.BOOTSSCHAEDEN,s);
        bootStatus.delete(d.get(BootStatus.NAME));
        bootStatus.add(d);
      }
    }

    bootStatus.writeFile();
  }

  String makeSureFileDoesntExist(String f) {
    int cnt = 0;
    int punkt = f.lastIndexOf(".");
    String head;
    String tail;
    if (punkt >= 0) {
      head = f.substring(0,punkt);
      tail = f.substring(punkt+1);
    } else {
      head = f;
      tail = "";
    }
    while ((new File(f)).exists()) {
      cnt++;
      f = head + "_" + cnt + "." + tail;
    }
    return f;
  }

  void autoCreateNewFb() {
    String fnameEfb = Daten.efaConfig.efaDirekt_autoNewFb_datei.getValue().trim();
    Daten.efaConfig.efaDirekt_autoNewFb_datum.unset();
    Daten.efaConfig.efaDirekt_autoNewFb_datei.setValue("");

    fnameEfb = EfaUtil.makeFullPath(EfaUtil.getPathOfFile(Daten.fahrtenbuch.getFileName()),fnameEfb);
    Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLOGBOOK,
            International.getString("Automatisches Anlegen eines neuen Fahrtenbuchs wird begonnen ..."));


    FBDaten fbDaten = null;
    Fahrtenbuch neuesFb = null;
    String oldNextFb = null;
    String oldFnameEfbb = null;
    String oldFnameEfbm = null;
    String oldFnameEfbz = null;
    String oldFnameEfbs = null;

    boolean abgebrocheneFahrten = false;

    int level = 0;
    try {
      if (!fnameEfb.toUpperCase().endsWith(".EFB")) fnameEfb = fnameEfb + ".efb";
      fnameEfb = makeSureFileDoesntExist(fnameEfb);
      String fnameBase = fnameEfb.substring(0,fnameEfb.lastIndexOf("."));
      String fnameEfbb = makeSureFileDoesntExist(fnameBase+".efbb");
      String fnameEfbm = makeSureFileDoesntExist(fnameBase+".efbm");
      String fnameEfbz = makeSureFileDoesntExist(fnameBase+".efbz");
      String fnameEfbs = makeSureFileDoesntExist(fnameBase+".efbs");
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              International.getString("Name für neue Fahrtenbuchdatei")+": "+fnameEfb);
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              International.getMessage("Name für neue {list}",
              International.getString("Bootsliste"))+": "+fnameEfbb);
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              International.getMessage("Name für neue {list}",
              International.getString("Mitgliederliste"))+": "+fnameEfbm);
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              International.getMessage("Name für neue {list}",
              International.getString("Zielliste"))+": "+fnameEfbz);
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              International.getMessage("Name für neue {list}",
              International.getString("Statistikeinstellungen"))+": "+fnameEfbs);

      oldFnameEfbb = Daten.fahrtenbuch.getDaten().boote.getFileName();
      oldFnameEfbm = Daten.fahrtenbuch.getDaten().mitglieder.getFileName();
      oldFnameEfbz = Daten.fahrtenbuch.getDaten().ziele.getFileName();
      oldFnameEfbs = Daten.fahrtenbuch.getDaten().statistik.getFileName();
      fbDaten = new FBDaten(Daten.fahrtenbuch.getDaten());
      fbDaten.boote.setFileName(fnameEfbb);
      fbDaten.mitglieder.setFileName(fnameEfbm);
      fbDaten.ziele.setFileName(fnameEfbz);
      fbDaten.statistik.setFileName(fnameEfbs);
      fbDaten.bootDatei = EfaUtil.makeRelativePath(fnameEfbb,fnameEfb);
      fbDaten.mitgliederDatei = EfaUtil.makeRelativePath(fnameEfbm,fnameEfb);
      fbDaten.zieleDatei = EfaUtil.makeRelativePath(fnameEfbz,fnameEfb);
      fbDaten.statistikDatei = EfaUtil.makeRelativePath(fnameEfbs,fnameEfb);

      // Neue Datenlisten erstellen
      level = 1;
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              "L1-START: " + International.getString("Erstelle neue Datenlisten ..."));
      if (!fbDaten.boote.writeFile()) {
          LogString.logError_fileCreationFailed(fbDaten.boote.getFileName(), International.getString("Bootsliste"));
          throw new Exception("Level 1");
      }
      if (!fbDaten.mitglieder.writeFile()) {
          LogString.logError_fileCreationFailed(fbDaten.mitglieder.getFileName(), International.getString("Mitgliederliste"));
          throw new Exception("Level 1");
      }
      if (!fbDaten.ziele.writeFile()) {
          LogString.logError_fileCreationFailed(fbDaten.ziele.getFileName(), International.getString("Zielliste"));
          throw new Exception("Level 1");
      }
      if (!fbDaten.statistik.writeFile()) {
          LogString.logError_fileCreationFailed(fbDaten.statistik.getFileName(), International.getString("Statistikeinstellungen"));
          throw new Exception("Level 1");
      }
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              "L1-DONE: " + International.getString("Fertig mit dem Erstellen der Datenlisten."));

      // Neue Fahrtenbuchdatei erstellen
      level = 2;
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              "L2-START: " + International.getString("Erstelle neues Fahrtenbuch ..."));
      neuesFb = new Fahrtenbuch(fnameEfb);
      neuesFb.setDaten(fbDaten);
      neuesFb.setPrevFb(EfaUtil.makeRelativePath(Daten.fahrtenbuch.getFileName(),neuesFb.getFileName()));
      neuesFb.setNextFb("");
      if (!neuesFb.writeFile()) {
          LogString.logError_fileCreationFailed(neuesFb.getFileName(), International.getString("Fahrtenbuch"));
          throw new Exception("Level 2");
      }
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              "L2-DONE: " + International.getString("Fertig mit dem Erstellen des Fahrtenbuchs."));

      // Fahrten für Boote, die noch unterwegs sind, abbrechen
      level = 3;
      Vector unterwegs = bootStatus.getBoote(BootStatus.STAT_UNTERWEGS);
      if (unterwegs.size()>0) {
        abgebrocheneFahrten = true;
        Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
                "L3-START: " + International.getString("Breche bestehende Fahrten ab ..."));
        if (!bootStatus.writeFile()) {
            LogString.logError_fileCreationFailed(bootStatus.getFileName(), International.getString("Bootsstatus-Liste"));
            throw new Exception("Level 3");
        }
        for (int i=0; i<unterwegs.size(); i++) {
          fahrtAbbruch((String)unterwegs.get(i),false);
        }
        level = 4;
        if (!bootStatus.writeFile()) {
            LogString.logError_fileCreationFailed(bootStatus.getFileName(), International.getString("Bootsstatus-Liste"));
            throw new Exception("Level 4");
        }
        Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
                "L4-DONE: " + International.getString("Abbrechen der Fahrten beendet."));
      }

      // Änderungen an altem Fahrtenbuch speichern
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              "L5-START: " + International.getString("Speichere Änderungen an altem Fahrtenbuch ..."));
      oldNextFb = Daten.fahrtenbuch.getNextFb(false);
      level = 5;
      Daten.fahrtenbuch.setNextFb(EfaUtil.makeRelativePath(neuesFb.getFileName(),Daten.fahrtenbuch.getFileName()));
      if (!Daten.fahrtenbuch.writeFile()) {
          LogString.logError_fileCreationFailed(Daten.fahrtenbuch.getFileName(), International.getString("Fahrtenbuch"));
          throw new Exception("Level 5");
      }
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLB_LX,
              "L5-DONE: " + International.getString("Änderungen am Fahrtenbuch gespeichert."));

      level = 6;
      Daten.fahrtenbuch = neuesFb;
      Daten.efaConfig.direkt_letzteDatei.setValue(Daten.fahrtenbuch.getFileName());
      Daten.efaConfig.writeFile();

      level = 7;
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLBDONE,
              International.getString("Automatisches Anlegen des neuen Fahrtenbuchs erfolgreich abgeschlossen."));
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTOSTARTNEWLBDONE,
              International.getMessage("Aktuelles Fahrtenbuch ist jetzt: {filename}",Daten.fahrtenbuch.getFileName()));

      Nachricht n = new Nachricht();
      n.name = Daten.EFA_SHORTNAME;
      n.empfaenger = Nachricht.ADMIN;
      n.betreff = International.getString("Neues Fahrtenbuch angelegt");
      n.nachricht = International.getString("efa hat soeben wie konfiguriert ein neues Fahrtenbuch angelegt.")+"\n"+
                    International.getMessage("Die neue Fahrtenbuchdatei ist: {filename}",Daten.fahrtenbuch.getFileName())+"\n"+
                    International.getString("Der Vorgang wurde ERFOLGREICH abgeschlossen.")+"\n\n"+
                    (abgebrocheneFahrten ? International.getString("Zum Zeitpunkt des Fahrtenbuchwechsels befanden sich noch einige Boote "+
                                           "auf dem Wasser. Diese Fahrten wurden ABGEBROCHEN. Die abgebrochenen "+
                                           "Fahrten sind in der Logdatei verzeichnet.")+"\n\n" : "") +
                    International.getString("Ein Protokoll ist in der Logdatei (Admin-Modus: Logdatei anzeigen) zu finden.");
      Daten.nachrichten.add(n);
      Daten.nachrichten.writeFile();

//      this.efaButton.requestFocus();
//      this.booteVerfuegbar.setSelectedIndex(-1);
      EfaUtil.sleep(500);
      updateBootsListen();
      EfaUtil.sleep(500);
      efaDirektBackgroundTask.interrupt();
    } catch(Exception e) {
      Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTOSTARTNEWLOGBOOK,
              International.getString("Beim Versuch, ein neues Fahrtenbuch anzulegen, trat ein Fehler auf. Alle Änderungen werden rückgängig gemacht ..."));
      switch (level) {
        case 0: break; // nothing to do
        case 7: break; // nothing to do
        case 6: break; // nothing to do
        case 5: Logger.log(Logger.WARNING, Logger.MSG_WARN_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} ...",5));
                Daten.fahrtenbuch.setNextFb(oldNextFb);
                Daten.fahrtenbuch.writeFile(); // egal, ob dies fehlschlägt oder nicht
                Logger.log(Logger.INFO, Logger.MSG_EVT_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} erfolgreich.",5));
        case 4: Logger.log(Logger.WARNING, Logger.MSG_WARN_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} ...",4));
                // nothing to do
                Logger.log(Logger.INFO, Logger.MSG_EVT_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} erfolgreich.",4));
        case 3: Logger.log(Logger.WARNING, Logger.MSG_WARN_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} ...",3));
                if (!bootStatus.readFile()) {
                  Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTONEWLOGROLLBACK,
                          International.getMessage("Rollback von Level {n} fehlgeschlagen: {msg}",
                          3,International.getString("Bootsstatus konnte nicht wiederhergestellt werden.")));
                } else {
                  Logger.log(Logger.INFO, Logger.MSG_EVT_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} erfolgreich.",3));
                }
        case 2: Logger.log(Logger.WARNING, Logger.MSG_WARN_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} ...",2));
                // nothing to do
                Logger.log(Logger.INFO, Logger.MSG_EVT_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} erfolgreich.",2));
        case 1: Logger.log(Logger.WARNING, Logger.MSG_WARN_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} ...",1));
                Daten.fahrtenbuch.getDaten().boote.setFileName(oldFnameEfbb);
                Daten.fahrtenbuch.getDaten().mitglieder.setFileName(oldFnameEfbm);
                Daten.fahrtenbuch.getDaten().ziele.setFileName(oldFnameEfbz);
                Daten.fahrtenbuch.getDaten().statistik.setFileName(oldFnameEfbs);
                int errors = 0;
                if (!Daten.fahrtenbuch.getDaten().boote.writeFile()) {
                  Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTONEWLOGROLLBACK,
                          LogString.logstring_fileCreationFailed(Daten.fahrtenbuch.getDaten().boote.getFileName(),International.getString("Bootsliste")));
                  errors++;
                }
                if (!Daten.fahrtenbuch.getDaten().mitglieder.writeFile()) {
                  Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTONEWLOGROLLBACK,
                          LogString.logstring_fileCreationFailed(Daten.fahrtenbuch.getDaten().mitglieder.getFileName(),International.getString("Mitgliederliste")));
                  errors++;
                }
                if (!Daten.fahrtenbuch.getDaten().ziele.writeFile()) {
                  Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTONEWLOGROLLBACK,
                          LogString.logstring_fileCreationFailed(Daten.fahrtenbuch.getDaten().ziele.getFileName(),International.getString("Zielliste")));
                  errors++;
                }
                if (!Daten.fahrtenbuch.getDaten().statistik.writeFile()) {
                  Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTONEWLOGROLLBACK,
                          LogString.logstring_fileCreationFailed(Daten.fahrtenbuch.getDaten().statistik.getFileName(),International.getString("Statistikeinstellungen")));
                  errors++;
                }
                if (errors == 0) {
                  Logger.log(Logger.INFO, Logger.MSG_EVT_AUTONEWLOGROLLBACK,
                        International.getMessage("Rollback von Level {n} erfolgreich.",1));
                } else {
                  Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTONEWLOGROLLBACK,
                          International.getMessage("Rollback von Level {level} mit {n} Fehlern abgeschlossen.",1,errors));
                }
                break;
        default: Logger.log(Logger.ERROR, Logger.MSG_ERR_AUTONEWLOGROLLBACK,
                International.getString("Rollback nicht möglich: efa kann den Originalzustand nicht wiederherstellen!"));
                 Logger.log(Logger.ERROR, Logger.MSG_ERR_INCONSISTENTSTATE,
                         International.getString("Kritischer Fehler")+": "+
                         International.getString("efa befindet sich in einem undefinierten Zustand! Überprüfung durch Administrator erforderlich!"));
      }
      Nachricht n = new Nachricht();
      n.name = Daten.EFA_SHORTNAME;
      n.empfaenger = Nachricht.ADMIN;
      n.betreff = International.getString("FEHLER beim Anlegen eines neuen Fahrtenbuchs");
      n.nachricht = International.getString("efa hat soeben versucht, wie konfiguriert ein neues Fahrtenbuch anzulegen.")+"\n"+
                    International.getString("Bei diesem Vorgang traten jedoch FEHLER auf.")+"\n\n"+
                    International.getString("Ein Protokoll ist in der Logdatei (Admin-Modus: Logdatei anzeigen) zu finden.");
      Daten.nachrichten.add(n);
      Daten.nachrichten.writeFile();

      Daten.efaConfig.writeFile();
      Logger.log(Logger.INFO, Logger.MSG_EVT_AUTONEWLOGROLLBACK,
              International.getString("Rückgängigmachen aller Änderungen abgeschlossen."));
    }

  }


}
